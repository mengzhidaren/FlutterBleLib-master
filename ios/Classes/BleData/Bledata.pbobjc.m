// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bledata.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Bledata.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - BleDataBledataRoot

@implementation BleDataBledataRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - BleDataBledataRoot_FileDescriptor

static GPBFileDescriptor *BleDataBledataRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                 objcPrefix:@"BleData"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum BleDataLogLevelMessage

GPBEnumDescriptor *BleDataLogLevelMessage_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Verbose\000Debug\000Info\000Warning\000Error\000None\000";
    static const int32_t values[] = {
        BleDataLogLevelMessage_Verbose,
        BleDataLogLevelMessage_Debug,
        BleDataLogLevelMessage_Info,
        BleDataLogLevelMessage_Warning,
        BleDataLogLevelMessage_Error,
        BleDataLogLevelMessage_None,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(BleDataLogLevelMessage)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:BleDataLogLevelMessage_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL BleDataLogLevelMessage_IsValidValue(int32_t value__) {
  switch (value__) {
    case BleDataLogLevelMessage_Verbose:
    case BleDataLogLevelMessage_Debug:
    case BleDataLogLevelMessage_Info:
    case BleDataLogLevelMessage_Warning:
    case BleDataLogLevelMessage_Error:
    case BleDataLogLevelMessage_None:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum BleDataBluetoothStateMessage

GPBEnumDescriptor *BleDataBluetoothStateMessage_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Unknown\000Resetting\000Unsupported\000Unauthoriz"
        "ed\000PoweredOff\000PoweredOn\000";
    static const int32_t values[] = {
        BleDataBluetoothStateMessage_Unknown,
        BleDataBluetoothStateMessage_Resetting,
        BleDataBluetoothStateMessage_Unsupported,
        BleDataBluetoothStateMessage_Unauthorized,
        BleDataBluetoothStateMessage_PoweredOff,
        BleDataBluetoothStateMessage_PoweredOn,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(BleDataBluetoothStateMessage)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:BleDataBluetoothStateMessage_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL BleDataBluetoothStateMessage_IsValidValue(int32_t value__) {
  switch (value__) {
    case BleDataBluetoothStateMessage_Unknown:
    case BleDataBluetoothStateMessage_Resetting:
    case BleDataBluetoothStateMessage_Unsupported:
    case BleDataBluetoothStateMessage_Unauthorized:
    case BleDataBluetoothStateMessage_PoweredOff:
    case BleDataBluetoothStateMessage_PoweredOn:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - BleDataScanDataMessage

@implementation BleDataScanDataMessage

@dynamic scanMode;
@dynamic callbackType;
@dynamic uuidsArray, uuidsArray_Count;

typedef struct BleDataScanDataMessage__storage_ {
  uint32_t _has_storage_[1];
  int32_t scanMode;
  int32_t callbackType;
  NSMutableArray *uuidsArray;
} BleDataScanDataMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "scanMode",
        .dataTypeSpecific.className = NULL,
        .number = BleDataScanDataMessage_FieldNumber_ScanMode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BleDataScanDataMessage__storage_, scanMode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "callbackType",
        .dataTypeSpecific.className = NULL,
        .number = BleDataScanDataMessage_FieldNumber_CallbackType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(BleDataScanDataMessage__storage_, callbackType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "uuidsArray",
        .dataTypeSpecific.className = NULL,
        .number = BleDataScanDataMessage_FieldNumber_UuidsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(BleDataScanDataMessage__storage_, uuidsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BleDataScanDataMessage class]
                                     rootClass:[BleDataBledataRoot class]
                                          file:BleDataBledataRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BleDataScanDataMessage__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\010\000\002\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - BleDataBleDeviceMessage

@implementation BleDataBleDeviceMessage

@dynamic id_p;
@dynamic name;
@dynamic rssi;
@dynamic mtu;
@dynamic isConnected;

typedef struct BleDataBleDeviceMessage__storage_ {
  uint32_t _has_storage_[1];
  int32_t rssi;
  int32_t mtu;
  NSString *id_p;
  NSString *name;
} BleDataBleDeviceMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = BleDataBleDeviceMessage_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BleDataBleDeviceMessage__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = BleDataBleDeviceMessage_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(BleDataBleDeviceMessage__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "rssi",
        .dataTypeSpecific.className = NULL,
        .number = BleDataBleDeviceMessage_FieldNumber_Rssi,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(BleDataBleDeviceMessage__storage_, rssi),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "mtu",
        .dataTypeSpecific.className = NULL,
        .number = BleDataBleDeviceMessage_FieldNumber_Mtu,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(BleDataBleDeviceMessage__storage_, mtu),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "isConnected",
        .dataTypeSpecific.className = NULL,
        .number = BleDataBleDeviceMessage_FieldNumber_IsConnected,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BleDataBleDeviceMessage class]
                                     rootClass:[BleDataBledataRoot class]
                                          file:BleDataBledataRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BleDataBleDeviceMessage__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\005\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - BleDataScanResultMessage

@implementation BleDataScanResultMessage

@dynamic hasBleDeviceMessage, bleDeviceMessage;
@dynamic rssi;
@dynamic timestampNanos;
@dynamic scanCallbackTypeMessage;

typedef struct BleDataScanResultMessage__storage_ {
  uint32_t _has_storage_[1];
  int32_t rssi;
  int32_t scanCallbackTypeMessage;
  BleDataBleDeviceMessage *bleDeviceMessage;
  uint64_t timestampNanos;
} BleDataScanResultMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "bleDeviceMessage",
        .dataTypeSpecific.className = GPBStringifySymbol(BleDataBleDeviceMessage),
        .number = BleDataScanResultMessage_FieldNumber_BleDeviceMessage,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BleDataScanResultMessage__storage_, bleDeviceMessage),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "rssi",
        .dataTypeSpecific.className = NULL,
        .number = BleDataScanResultMessage_FieldNumber_Rssi,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(BleDataScanResultMessage__storage_, rssi),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "timestampNanos",
        .dataTypeSpecific.className = NULL,
        .number = BleDataScanResultMessage_FieldNumber_TimestampNanos,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(BleDataScanResultMessage__storage_, timestampNanos),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "scanCallbackTypeMessage",
        .dataTypeSpecific.className = NULL,
        .number = BleDataScanResultMessage_FieldNumber_ScanCallbackTypeMessage,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(BleDataScanResultMessage__storage_, scanCallbackTypeMessage),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BleDataScanResultMessage class]
                                     rootClass:[BleDataBledataRoot class]
                                          file:BleDataBledataRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BleDataScanResultMessage__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\020\000\003\016\000\004\027\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - BleDataConnectToDeviceDataMessage

@implementation BleDataConnectToDeviceDataMessage

@dynamic macAddress;
@dynamic isAutoConnect;
@dynamic requestMtu;

typedef struct BleDataConnectToDeviceDataMessage__storage_ {
  uint32_t _has_storage_[1];
  int32_t requestMtu;
  NSString *macAddress;
} BleDataConnectToDeviceDataMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "macAddress",
        .dataTypeSpecific.className = NULL,
        .number = BleDataConnectToDeviceDataMessage_FieldNumber_MacAddress,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BleDataConnectToDeviceDataMessage__storage_, macAddress),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isAutoConnect",
        .dataTypeSpecific.className = NULL,
        .number = BleDataConnectToDeviceDataMessage_FieldNumber_IsAutoConnect,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "requestMtu",
        .dataTypeSpecific.className = NULL,
        .number = BleDataConnectToDeviceDataMessage_FieldNumber_RequestMtu,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(BleDataConnectToDeviceDataMessage__storage_, requestMtu),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BleDataConnectToDeviceDataMessage class]
                                     rootClass:[BleDataBledataRoot class]
                                          file:BleDataBledataRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BleDataConnectToDeviceDataMessage__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\n\000\002\r\000\003\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - BleDataServiceMessages

@implementation BleDataServiceMessages

@dynamic serviceMessagesArray, serviceMessagesArray_Count;

typedef struct BleDataServiceMessages__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *serviceMessagesArray;
} BleDataServiceMessages__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "serviceMessagesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(BleDataServiceMessage),
        .number = BleDataServiceMessages_FieldNumber_ServiceMessagesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(BleDataServiceMessages__storage_, serviceMessagesArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BleDataServiceMessages class]
                                     rootClass:[BleDataBledataRoot class]
                                          file:BleDataBledataRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BleDataServiceMessages__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\000serviceMessages\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - BleDataServiceMessage

@implementation BleDataServiceMessage

@dynamic id_p;
@dynamic uuid;
@dynamic hasDevice, device;
@dynamic isPrimary;

typedef struct BleDataServiceMessage__storage_ {
  uint32_t _has_storage_[1];
  NSString *uuid;
  BleDataBleDeviceMessage *device;
  double id_p;
} BleDataServiceMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = BleDataServiceMessage_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BleDataServiceMessage__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "uuid",
        .dataTypeSpecific.className = NULL,
        .number = BleDataServiceMessage_FieldNumber_Uuid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(BleDataServiceMessage__storage_, uuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "device",
        .dataTypeSpecific.className = GPBStringifySymbol(BleDataBleDeviceMessage),
        .number = BleDataServiceMessage_FieldNumber_Device,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(BleDataServiceMessage__storage_, device),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "isPrimary",
        .dataTypeSpecific.className = NULL,
        .number = BleDataServiceMessage_FieldNumber_IsPrimary,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BleDataServiceMessage class]
                                     rootClass:[BleDataBledataRoot class]
                                          file:BleDataBledataRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BleDataServiceMessage__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\004\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - BleDataCharacteristicMessages

@implementation BleDataCharacteristicMessages

@dynamic characteristicMessageArray, characteristicMessageArray_Count;

typedef struct BleDataCharacteristicMessages__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *characteristicMessageArray;
} BleDataCharacteristicMessages__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "characteristicMessageArray",
        .dataTypeSpecific.className = GPBStringifySymbol(BleDataCharacteristicMessage),
        .number = BleDataCharacteristicMessages_FieldNumber_CharacteristicMessageArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(BleDataCharacteristicMessages__storage_, characteristicMessageArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BleDataCharacteristicMessages class]
                                     rootClass:[BleDataBledataRoot class]
                                          file:BleDataBledataRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BleDataCharacteristicMessages__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\000characteristicMessage\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - BleDataCharacteristicMessage

@implementation BleDataCharacteristicMessage

@dynamic id_p;
@dynamic uuid;
@dynamic serviceId;
@dynamic serviceUuid;
@dynamic deviceId;
@dynamic isReadable;
@dynamic isWritableWithResponse;
@dynamic isWritableWithoutResponse;
@dynamic isNotificable;
@dynamic isIndicatable;
@dynamic isNotifing;
@dynamic value;

typedef struct BleDataCharacteristicMessage__storage_ {
  uint32_t _has_storage_[1];
  int32_t serviceId;
  NSString *uuid;
  NSString *serviceUuid;
  NSString *deviceId;
  NSString *value;
  double id_p;
} BleDataCharacteristicMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = BleDataCharacteristicMessage_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BleDataCharacteristicMessage__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "uuid",
        .dataTypeSpecific.className = NULL,
        .number = BleDataCharacteristicMessage_FieldNumber_Uuid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(BleDataCharacteristicMessage__storage_, uuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "serviceId",
        .dataTypeSpecific.className = NULL,
        .number = BleDataCharacteristicMessage_FieldNumber_ServiceId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(BleDataCharacteristicMessage__storage_, serviceId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "serviceUuid",
        .dataTypeSpecific.className = NULL,
        .number = BleDataCharacteristicMessage_FieldNumber_ServiceUuid,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(BleDataCharacteristicMessage__storage_, serviceUuid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "deviceId",
        .dataTypeSpecific.className = NULL,
        .number = BleDataCharacteristicMessage_FieldNumber_DeviceId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(BleDataCharacteristicMessage__storage_, deviceId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isReadable",
        .dataTypeSpecific.className = NULL,
        .number = BleDataCharacteristicMessage_FieldNumber_IsReadable,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isWritableWithResponse",
        .dataTypeSpecific.className = NULL,
        .number = BleDataCharacteristicMessage_FieldNumber_IsWritableWithResponse,
        .hasIndex = 7,
        .offset = 8,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isWritableWithoutResponse",
        .dataTypeSpecific.className = NULL,
        .number = BleDataCharacteristicMessage_FieldNumber_IsWritableWithoutResponse,
        .hasIndex = 9,
        .offset = 10,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isNotificable",
        .dataTypeSpecific.className = NULL,
        .number = BleDataCharacteristicMessage_FieldNumber_IsNotificable,
        .hasIndex = 11,
        .offset = 12,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isIndicatable",
        .dataTypeSpecific.className = NULL,
        .number = BleDataCharacteristicMessage_FieldNumber_IsIndicatable,
        .hasIndex = 13,
        .offset = 14,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isNotifing",
        .dataTypeSpecific.className = NULL,
        .number = BleDataCharacteristicMessage_FieldNumber_IsNotifing,
        .hasIndex = 15,
        .offset = 16,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "value",
        .dataTypeSpecific.className = NULL,
        .number = BleDataCharacteristicMessage_FieldNumber_Value,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(BleDataCharacteristicMessage__storage_, value),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BleDataCharacteristicMessage class]
                                     rootClass:[BleDataBledataRoot class]
                                          file:BleDataBledataRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BleDataCharacteristicMessage__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\t\003\t\000\004\013\000\005\010\000\006\n\000\007\026\000\010\031\000\t\r\000\n\r\000\013\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - BleDataMonitorCharacteristicMessage

@implementation BleDataMonitorCharacteristicMessage

@dynamic transactionId;
@dynamic hasCharacteristicMessage, characteristicMessage;

typedef struct BleDataMonitorCharacteristicMessage__storage_ {
  uint32_t _has_storage_[1];
  NSString *transactionId;
  BleDataCharacteristicMessage *characteristicMessage;
} BleDataMonitorCharacteristicMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "transactionId",
        .dataTypeSpecific.className = NULL,
        .number = BleDataMonitorCharacteristicMessage_FieldNumber_TransactionId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BleDataMonitorCharacteristicMessage__storage_, transactionId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "characteristicMessage",
        .dataTypeSpecific.className = GPBStringifySymbol(BleDataCharacteristicMessage),
        .number = BleDataMonitorCharacteristicMessage_FieldNumber_CharacteristicMessage,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(BleDataMonitorCharacteristicMessage__storage_, characteristicMessage),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BleDataMonitorCharacteristicMessage class]
                                     rootClass:[BleDataBledataRoot class]
                                          file:BleDataBledataRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BleDataMonitorCharacteristicMessage__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\r\000\002\025\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
